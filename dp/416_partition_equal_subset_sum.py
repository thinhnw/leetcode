class Solution(object):
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        f = [{} for _ in range(len(nums))]
        def dp(i, delta):
            # print(i, delta)
            if i == 0:
                return abs(delta) == abs(nums[0])
            if delta in f[i]:
                return f[i][delta]
            f[i][delta] = dp(i - 1, delta - nums[i]) or dp(i - 1, delta + nums[i])
            return f[i][delta]
        return dp(len(nums)-1, 0)


Solution().canPartition(

)